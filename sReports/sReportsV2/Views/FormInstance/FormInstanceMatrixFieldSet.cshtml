@using sReportsV2.DTOs.Form.DataOut;
@using sReportsV2.DTOs.Field.DataOut;
@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Extensions;
@inject sReportsV2.Controllers.FormCommonController Controller
@model FieldSelectableDataOut

@{
    bool isChapterReadonly = ViewBag.Chapter;
    string fieldSetId = ViewBag.FieldSetId;
    var fieldInstanceRepetitionInfo = Model.GetFieldInstanceRepetitionInfo(0);
}

<tr @Html.Raw(Model.DependentAttributes) class="form-element form-radio form-radio-inline field-set-content radio-row @Model.ShowHiddenFieldsClass">
    <td class="radio-row-label matrix-border-left cursor-auto">@Model.FullLabel</td>
    @foreach (FormFieldValueDataOut ffv in Model.Values)
    {
        bool isRadioField = Model is FieldRadioDataOut;
        <td class="radio-cell radio-cell-middle">
            <label class="form-radio-label width-fit-content matrix-label" @Html.Raw(Model.Values.Count <= 5 ? "style= 'width: fit-content;'" : "")>
                @if (isRadioField)
                {
                    var isOptionChosen = Model.IsOptionChosen(ffv.Id);
                    var model = Model as FieldRadioDataOut;
                    var showMissingValue = model?.FieldInstanceValues?.FirstOrDefault()?.IsSpecialValue ?? false;
                    var isReadonly = Model.IsReadonly || isChapterReadonly;

                    <span name="@fieldInstanceRepetitionInfo.Item1" data-fieldId="@(model.Id)" class="missing-value-span @(showMissingValue ? "show-missing-value" : "hide-missing-value")">
                        <span>@sReportsV2.Cache.Resources.TextLanguage.MissingValue</span>
                    </span>

                    <span class="@(showMissingValue ? "hide-missing-value" : "")">
                        @{
                            AddRadio(model, isOptionChosen, isReadonly, ffv, fieldSetId, fieldInstanceRepetitionInfo);
                        }
                        <i class="form-radio-button"></i>
                    </span>
                }
                else
                {
                    var isOptionChosen = Model.IsOptionChosen(ffv.Id);
                    var model = Model as FieldCheckboxDataOut;
                    var showMissingValue = model?.FieldInstanceValues?.FirstOrDefault()?.IsSpecialValue ?? false;
                    var isReadonly = Model.IsReadonly || isChapterReadonly;

                    <span name="@fieldInstanceRepetitionInfo.Item1" data-fieldId="@(model.Id)" class="missing-value-span @(showMissingValue ? "show-missing-value" : "hide-missing-value")">
                        <span>@sReportsV2.Cache.Resources.TextLanguage.MissingValue</span>
                    </span>

                    <span class="@(showMissingValue ? "hide-missing-value" : "")">
                        @{
                            AddCheckBox(model, isOptionChosen, isReadonly, ffv, fieldSetId, fieldInstanceRepetitionInfo);
                        }
                        <i class="form-checkbox-button table-checkbox dynamic-checkbox-size"></i>
                    </span>
                }
            </label>
        </td>
    }
    <td class="radio-row-label matrix-reset matrix-border-right">
        <div class="dropdown dropdown-center">
            <a class="dropdown-matrix" role="button" id="dropdownMenuButton-@fieldSetId" aria-haspopup="true" aria-expanded="false" data-display="static">
                <img alt="" class="dots dots-center" src="/css/img/icons/dots_black.svg">
            </a>
            <div class="dropdown-menu  dropdown-menu-right dropleft mr-3 mt-3 matrix-menu" aria-labelledby="dropdownMenuButton-@fieldSetId">
                @await Html.PartialAsync("~/Views/Form/Common/FieldButtonGroup.cshtml", 
                    Model, 
                    new ViewDataDictionary(ViewData) 
                    {
                        { "repetitiveValue", Model.GetValue() },
                        { "isMatrixFieldSet", true }
                    })
            </div>
        </div>
        <div style="display:none" class="form-element-description field-desc">
            @Html.Raw(Model.Description)
        </div>
    </td>
</tr>

@functions {
    private void AddRadio(FieldRadioDataOut radioField, bool isChecked, bool isReadonly, FormFieldValueDataOut ffv, string fieldSetId, Tuple<string, bool> fieldInstanceRepetitionInfo)
    {
        <input type="radio"
               id="@(fieldInstanceRepetitionInfo.Item1)-@ffv.Value.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()"
               data-value="@ffv.Label"
               data-numericvalue="@ffv.NumericValue"
               value="@ffv.Id"
               class="checkbox-radio form-radio-field"
               onclick="return @((!isReadonly).ToString().ToLower())"
        @Html.Raw(radioField.GetFieldInstanceDataAttrs(fieldSetId, 1))
        @(isChecked ? "checked" : string.Empty)
        @Html.Disabled(fieldInstanceRepetitionInfo.Item2 || radioField.IsDisabled)>
    }
}

@functions {
    private void AddCheckBox(FieldCheckboxDataOut checkboxField, bool isChecked, bool isReadonly, FormFieldValueDataOut ffv, string fieldSetId, Tuple<string, bool> fieldInstanceRepetitionInfo)
    {
        <input value="@ffv.Id"
               data-value="@ffv.Label"
               id="@fieldInstanceRepetitionInfo.Item1-@ffv.Value.ReplaceNonAlphaCharactersWithDash().RemoveDiacritics()"
        @(isChecked ? "checked" : "")
               class="checkbox-radio form-checkbox-field"
               type="checkbox"
               data-numericvalue="@ffv.NumericValue"
               onclick="return @((!isReadonly).ToString().ToLower())"
        @Html.Raw(checkboxField.GetFieldInstanceDataAttrs(fieldSetId, 1))
        @Html.Disabled(fieldInstanceRepetitionInfo.Item2 || checkboxField.IsDisabled) />
    }
}