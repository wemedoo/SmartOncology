@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using sReportsV2.DTOs.DigitalGuideline.DataOut
@using sReportsV2.Common.Extensions;
@using sReportsV2.Common.Constants;

@{
    var userCookieData = ViewBag.UserCookieData;
    bool hasUpdatePerm = userCookieData.UserHasPermission(PermissionNames.Update, ModuleNames.ClinicalPathway);
    bool hasDeletePerm = userCookieData.UserHasPermission(PermissionNames.Delete, ModuleNames.ClinicalPathway);
    var serializedEntries = new Dictionary<string, string>();
}

<div class="single-table version-history-table">
    <table class="table table-striped table-border">
        <thead class="color-header">
            <tr class="table-header-row">
                <th id="Title" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortVersionHistoryTable('Title')">@sReportsV2.Cache.Resources.TextLanguage.Title.ToUpper()</th>
                <th id="Version" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortVersionHistoryTable('Version')">@sReportsV2.Cache.Resources.TextLanguage.Version.ToUpper()</th>
                <th id="EntryDatetime" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortVersionHistoryTable('EntryDatetime')">@sReportsV2.Cache.Resources.TextLanguage.EntryDateTime.ToUpper()</th>
                <th id="LastUpdate" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortVersionHistoryTable('LastUpdate')">@sReportsV2.Cache.Resources.TextLanguage.LastUpdate.ToUpper()</th>
                <th style="border-bottom: unset;border-top: unset; background-color: #f0f1f1"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (GuidelineDataOut entry in Model.Data)
            {
                var entryJson = JsonConvert.SerializeObject(entry.ToExportJson(), new JsonSerializerSettings
                {
                    ContractResolver = new CamelCasePropertyNamesContractResolver(),
                    Formatting = Formatting.None
                });

                serializedEntries.Add($"graphEntry_{entry.Id}", entryJson);

                <tr id="row-@entry.Id" class="table-content-row">
                    <td>@entry.Title</td>
                    <td>@(entry.Version != null ? entry.Version.Major + "." + entry.Version.Minor : string.Empty)</td>
                    <td>@entry.EntryDatetime.ToTimeZonedDateTime(ViewBag.UserCookieData.TimeZoneOffset as string, ViewBag.DateFormat as string)</td>
                    <td>@entry.LastUpdate.ToTimeZonedDateTime(ViewBag.UserCookieData.TimeZoneOffset as string, ViewBag.DateFormat as string)</td>

                    <td>
                        @if (hasUpdatePerm || hasDeletePerm)
                        {
                            <div class="dropdown show">
                                <a class="dropdown-button" href="#" data-toggle="dropdown" role="button" id="dropdownMenuLink-@entry.Id" aria-haspopup="true" aria-expanded="false">
                                    <img alt="" class="dots" src="/css/img/icons/3dots.png">
                                </a>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink-@entry.Id">
                                    @if (hasUpdatePerm)
                                    {
                                        <a class="dropdown-item" href="#" onclick="downloadPathwayVersion(event, '@entry.Title', graphEntry_@entry.Id)">
                                            <img alt="" class="edit-svg-size" src="/css/img/icons/ClinicalPathway/download-button.svg">
                                            @sReportsV2.Cache.Resources.TextLanguage.Download
                                        </a>
                                    }
                                    @if (hasDeletePerm && ViewBag.GuidelineId != entry.Id)
                                    {
                                        <a class="dropdown-item" href="#" onclick="removeEntry(event, '@entry.Id', '@entry.LastUpdate.Value.ToString("o")')">
                                            <img alt="" class="edit-svg-size" src="/css/img/icons/remove.svg">@sReportsV2.Cache.Resources.TextLanguage.Delete
                                        </a>
                                    }
                                </div>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (Model.Data.Count == 0)
    {
        @await Html.PartialAsync("NoResultFound")
    }
</div>

@if (Model.Data.Count > 0)
{
    ViewBag.PreventPushHistoryState = true;
    <div class="pager-container">
        @await Html.PartialAsync("Pagination")
    </div>
}

<script>
    @foreach (var kvp in serializedEntries)
    {
        @:var @kvp.Key = @Html.Raw(kvp.Value);
    }
</script>