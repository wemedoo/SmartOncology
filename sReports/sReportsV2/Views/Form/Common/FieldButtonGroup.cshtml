@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Extensions;
@using sReportsV2.DTOs.CodeEntry.DataOut
@using sReportsV2.DTOs.DTOs.QueryManagement.DataOut

@model sReportsV2.DTOs.Field.DataOut.FieldDataOut
@{
    bool showResetAndNeSection = ((bool?)ViewBag.ShowResetAndNeSection).GetValueOrDefault(true);

    Tuple<bool, bool, int> repetitiveInfo = Model.GetRepetitiveInfo();
    bool thesaurusHasValue = Model.ThesaurusId != 0;
    bool isNotDisabled = !(Model.IsDisabled);

    bool shouldDisplayRepetitiveIcon = repetitiveInfo.Item2;
    bool shouldDisplayDescriptionIcon = !string.IsNullOrWhiteSpace(Model.Description);
    bool shouldDisplayHelpIcon = Model.Help != null;
    bool shouldDisplayThesaurusIcon = ViewBag.UserCookieData != null && ViewBag.UserCookieData.UserHasPermission(PermissionNames.View, ModuleNames.Thesaurus);

    bool shouldDisplayFirstRow = HtmlExtension.AnyConditionIsMet(
        shouldDisplayDescriptionIcon,
        shouldDisplayHelpIcon,
        shouldDisplayThesaurusIcon,
        shouldDisplayRepetitiveIcon
        );

    int repetitiveCounter = ((int?)ViewBag.RepetitiveCounter).GetValueOrDefault(1);
    var fieldInstanceRepetitionInfo = Model.GetFieldInstanceRepetitionInfo(repetitiveCounter - 1);
    string fieldInstanceRepetitionId = fieldInstanceRepetitionInfo.Item1;
    bool specialValue = fieldInstanceRepetitionInfo.Item2;
    bool isMatrixFieldSet = ((bool?)ViewData["isMatrixFieldSet"]).GetValueOrDefault(false); // Access the boolean value here
    bool formInstanceMode = ViewBag.FormInstanceMode ?? false;
    string fieldSetId = ViewBag.FieldSetId ?? ((string)ViewData["fieldSetId"]);
    bool showBtnGroupSection = ((bool?)ViewBag.ShowBtnGroupSection).GetValueOrDefault(true);
    bool readOnly = false;

    List<CodeDataOut> statuses = ViewBag.Statuses as List<CodeDataOut>;
    var newStatusCD = statuses?.FirstOrDefault(c => c.HasPreferredTerm(CodeAttributeNames.New))?.Id ?? 0;
    var activeStatusCD = statuses?.FirstOrDefault(c => c.HasPreferredTerm(CodeAttributeNames.Active))?.Id ?? 0;
}

@if (showBtnGroupSection)
{
    <div class="btns-group d-inline-block @(showResetAndNeSection ? "show-reset-and-ne-section" : "")">
        @if (shouldDisplayFirstRow)
        {
            <div class="basic-actions @(isMatrixFieldSet ? "matrix-actions" : "")">
                <div class="hover-icon always-click-action margin-right-12 @shouldDisplayDescriptionIcon.GetVisibilityClass()" title="@sReportsV2.Cache.Resources.TextLanguage.Information" data-toggle="tooltip">
                    @if (!isMatrixFieldSet)
                    {
                        <img alt="" class="definition" src="/css/img/icons/fieldset_info.svg" onclick="showHideDescription(event)">
                    }
                    else
                    {
                        <div class="hover-instruction-icon always-click-action @shouldDisplayDescriptionIcon.GetVisibilityClass()" title="@sReportsV2.Cache.Resources.TextLanguage.Information" data-toggle="tooltip">
                            <img alt="" class="definition" src="/css/img/icons/fieldset_info.svg">
                            <div class="tooltip-instruction flex">
                                <img alt="" class="mr-1 definition position-absolute" src="/css/img/icons/fieldset_info.svg">
                                <span class="tooltip-desc">@Model.Description </span>
                            </div>
                        </div>
                    }
                </div>
                <div class="hover-icon always-click-action margin-right-12 @shouldDisplayHelpIcon.GetVisibilityClass()" title="@sReportsV2.Cache.Resources.TextLanguage.Instruction" data-toggle="tooltip">
                    <img alt="" class="info" src="/css/img/icons/definition_green.svg" onclick="showHelpModal(@Newtonsoft.Json.JsonConvert.SerializeObject(Model.Help, Newtonsoft.Json.Formatting.Indented))">
                </div>

                @if (formInstanceMode)
                {
                    var fivForThisRow = Model.FieldInstanceValues?.FirstOrDefault(v => v.FieldInstanceRepetitionId == fieldInstanceRepetitionId);
                    var queriesForThisRow = (fivForThisRow?.Queries) ?? new List<QueryDataOut>();

                    if (!queriesForThisRow.Any())
                    {
                        <div class="hover-icon always-click-action margin-right-12"
                             title="@sReportsV2.Cache.Resources.TextLanguage.Queries"
                             data-toggle="tooltip">
                            <img alt="" src="/css/img/icons/queries_icon.svg" onclick="showQueryModal(event, @readOnly.ToJsBoolean(), '@fieldInstanceRepetitionId', '@Model.Label', @false.ToJsBoolean())">
                        </div>
                    }
                    else
                    {
                        string iconSrc;

                        if (queriesForThisRow.Any(q => q.StatusCD == newStatusCD))
                        {
                            iconSrc = "/css/img/icons/new_query_icon.svg";
                        }
                        else if (queriesForThisRow.Any(q => q.StatusCD == activeStatusCD))
                        {
                            iconSrc = "/css/img/icons/active_query_icon.svg";
                        }
                        else
                        {
                            iconSrc = "/css/img/icons/resolved_query_icon.svg";
                        }

                        <div class="hover-icon always-click-action margin-right-12"
                             title="@sReportsV2.Cache.Resources.TextLanguage.Queries"
                             data-toggle="tooltip">
                            <img alt="" src="@iconSrc" onclick="showQueryHistoryModal(event, '@fieldInstanceRepetitionId', @readOnly.ToJsBoolean())">
                        </div>
                    }

                    <div class="hover-icon always-click-action margin-right-12 visible"
                         title="@sReportsV2.Cache.Resources.TextLanguage.History_of_changes"
                         data-toggle="tooltip">
                        <img alt="" class="@(!formInstanceMode ? "pe-none": "")"
                             src="/css/img/icons/history_of_changes_icon.svg"
                             onclick="showFormInstanceHistory('@ViewBag.FormInstanceId', '@fieldInstanceRepetitionId')">
                    </div>
                }

                <div class="hover-icon always-click-action margin-right-12 @shouldDisplayThesaurusIcon.GetVisibilityClass()" title="@sReportsV2.Cache.Resources.TextLanguage.Thesaurus" data-toggle="tooltip">
                    <img alt="" class="" src="/css/img/icons/@(thesaurusHasValue ? "thesaurus_green.svg": "thesaurus_grey.svg")" onclick="goToThesaurus('@(thesaurusHasValue ? Model.ThesaurusId.ToString() : "")')">
                </div>

                @if (isNotDisabled)
                {
                    <div class="hover-icon margin-right-12 @shouldDisplayRepetitiveIcon.GetVisibilityClass()" title="@sReportsV2.Cache.Resources.TextLanguage.Add_New @sReportsV2.Cache.Resources.TextLanguage.Repetitive @sReportsV2.Cache.Resources.TextLanguage.Field" data-toggle="tooltip">
                        <img alt="" class="repeat button-plus-repetitive" src="/css/img/icons/repeat_green.svg">
                    </div>
                    <div class="hover-icon" style="display:@(Model.FieldInstanceValues != null && Model.FieldInstanceValues.Count > 1 ? "" : "none")" title="@sReportsV2.Cache.Resources.TextLanguage.Remove" data-toggle="tooltip">
                        <img alt="" class="remove remove-repetitive" src="/css/img/icons/delete.svg">
                    </div>
                }
            </div>
        }
        @{
            RenderResetAndNeSection(showResetAndNeSection, isNotDisabled, repetitiveCounter, fieldInstanceRepetitionId, specialValue, isMatrixFieldSet, fieldSetId);
        }
    </div>
}


@functions {
    private void RenderResetAndNeSection(bool showResetAndNeSection, bool isNotDisabled, int repetitiveCounter, string fieldInstanceRepetitionId, bool specialValue, bool isMatrixFieldSet, string fieldSetId)
    {
        if (showResetAndNeSection && Model.AcceptsSpecialValue)
        {
            string repetitiveValue = ViewBag.RepetitiveValue;
            bool isVisible = Model != null && !Model.AllowSaveWithoutValue.HasValue;
                <div class="@(isMatrixFieldSet ? "reset-section" : "reset-and-ne-section")">
                    @if (!isVisible)
                {
                        <label title="@sReportsV2.Cache.Resources.TextLanguage.NE_Meaning" class="form-radio-label ne-btn mr-1 @(isMatrixFieldSet ? "padding-bottom-16" : "")">
                            <input type="radio"
                                   spec-value
                            @Html.Raw(Model.GetFieldInstanceDataAttrs(fieldSetId, repetitiveCounter))
                                   class="form-radio-field ne-radio"
                            @(specialValue ? "checked" : string.Empty)
                                   data-isspecialvalue=@specialValue
                                   disabled
                                   value="@repetitiveValue"
                            @(isVisible ? "hidden" : "")>
                            <i class="form-radio-button" @(isVisible ? "hidden" : "")></i>
                            <span class="missing-value-label @(Model.IsDisabled ? "pe-none" : "")" onclick="showMissingValuesModal(event, '@Model.Id', true)">@(isVisible ? "" : "Missing value")</span>
                        </label>
                }

                    <label class="ne-btn mr-1 position-relative @isNotDisabled.GetVisibilityClass()">
                        @if (isMatrixFieldSet)
                    {
                            <img alt="" class="reset-icon" src="/css/img/icons/reset.svg">
                    }
                        <span class="@(isMatrixFieldSet ? "form-radio-label ne-btn reset-label mr-1" : "ne-label")">
                            <a href="javascript:"
                               onclick="resetValue(event)"
                               title="@sReportsV2.Cache.Resources.TextLanguage.Reset @sReportsV2.Cache.Resources.TextLanguage.Answer"
                               data-field-name="@fieldInstanceRepetitionId"
                               class="ne-link @(isMatrixFieldSet ? "margin-left-8" : "")">
                                @sReportsV2.Cache.Resources.TextLanguage.Reset
                            </a>
                        </span>
                    </label>
                </div>
        }
    }
}