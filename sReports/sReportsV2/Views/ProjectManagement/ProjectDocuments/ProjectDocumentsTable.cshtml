@using sReportsV2.Common.Constants;
@using sReportsV2.Common.Extensions;
@using sReportsV2.DTOs.Pagination;
@using sReportsV2.DTOs.Form.DataOut;

@model PaginationDataOut<FormDataOut, sReportsV2.DTOs.Form.FormFilterDataIn>

@{
    var userCookieData = ViewBag.UserCookieData;
    bool hasEditPromptPerm = userCookieData.UserHasPermission(PermissionNames.Update, ModuleNames.ProjectManagement);
    bool hasEngineViewPerm = userCookieData.UserHasPermission(PermissionNames.View, ModuleNames.Engine);
    bool hasDeletePerm = userCookieData.UserHasPermission(PermissionNames.DeleteDocument, ModuleNames.ProjectManagement);
    bool showUserProjects = ViewBag.ShowUserProjects;
    bool readOnly = ((bool?)ViewBag.ReadOnly).GetValueOrDefault();
    ViewBag.Container = "TrialDocumentsTable";
    ViewBag.PreventPushHistoryState = true;
    List<FormDataOut> forms = Model != null && Model.Data != null ? Model.Data : new List<FormDataOut>();
}

<div class="table-responsive overflow-unset">
    <table class="table table-striped table-border">
        <thead class="color-header-important">
            <tr class="table-header-row">
                <th id="Title" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortTable('Title')"> @sReportsV2.Cache.Resources.TextLanguage.Title.ToUpper() </th>
                <th id="Version" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortTable('Version')"> @sReportsV2.Cache.Resources.TextLanguage.Version.ToUpper() </th>
                <th id="Class" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortTable('Class')"> @sReportsV2.Cache.Resources.TextLanguage.Class.ToUpper() </th>
                <th id="ExplicitPurpose" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortTable('ExplicitPurpose')"> @sReportsV2.Cache.Resources.TextLanguage.Explicit_Purpose.ToUpper() </th>
                <th id="ClinicalContext" class="sort-arrow" style="border-bottom: unset;border-top: unset;" onclick="sortTable('ClinicalContext')"> @sReportsV2.Cache.Resources.TextLanguage.Clinical_Context.ToUpper() </th>
                <th style="border-bottom: unset;border-top: unset;"></th>
            </tr>
        </thead>
        <tbody>

            @foreach (FormDataOut form in forms)
            {
                <tr id="row-@form.Id" class="table-content-row row-patient-preview row-shown">
                    <td class="trial-row-organizations" onclick="@RenderOnclickCall(form, showUserProjects)">
                        @form.Title 
                    </td>
                    <td class="trial-row-teams" onclick="@RenderOnclickCall(form, showUserProjects)">
                        @form.Version.GetFullVersionString() 
                    </td>
                    <td class="trial-row-occupation" onclick="@RenderOnclickCall(form, showUserProjects)">
                        @{ RenderDocumentProperty(form.DocumentProperties.Class != null ? form.DocumentProperties.Class.Class.ToString() : ""); }
                    </td>
                    <td class="trial-row-user" onclick="@RenderOnclickCall(form, showUserProjects)">
                        @{ RenderDocumentProperty(form.DocumentProperties.Purpose != null ? form.DocumentProperties.Purpose.ExplicitPurpose.ToString() : ""); } 
                    </td>
                    <td class="trial-row-user" onclick="@RenderOnclickCall(form, showUserProjects)">
                        @{ RenderDocumentProperty(form.DocumentProperties.ClinicalContext != null ? form.DocumentProperties.ClinicalContext.ClinicalContext.ToString() : ""); }
                    </td>
                    @if (!showUserProjects && !readOnly)
                    {
                        RenderLastCell(hasEditPromptPerm, hasEngineViewPerm, hasDeletePerm, form, showUserProjects);
                    }
                    else if(readOnly)
                    {
                        <td></td>
                    }
                    else
                    {
                        <td onclick="@RenderOnclickCall(form, showUserProjects)" style="text-align: center;">
                            <img alt="" class="folder-img" src="/css/img/icons/folder.png">
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    @if (forms.Count == 0)
    {
        @await Html.PartialAsync("NoResultFound")
    }
    @if (forms.Count > 0)
    {
        <div class="outer-paging">
            <div class="pager-container">
                @await Html.PartialAsync("Pagination")
            </div>
        </div>

    }
</div>

@functions {
    private void RenderDocumentProperty(string optionLabel)
    {
        <text> @sReportsV2.Cache.Resources.TextLanguage.ResourceManager.GetString(optionLabel) </text>
    }

    private void RenderLastCell(bool hasEditPromptPerm, bool hasViewPerm, bool hasDeletePerm, FormDataOut form, bool showUserProjects)
    {
        <td>
            @{
                RenderDropdownMenu(hasEditPromptPerm, hasViewPerm, hasDeletePerm, form, showUserProjects);
            }
        </td>
    }

    private void RenderDropdownMenu(bool hasEditPromptPerm, bool hasViewPerm, bool hasDeletePerm, FormDataOut form, bool showUserProjects)
    {
        if (hasDeletePerm || hasViewPerm || hasEditPromptPerm)
        {
            <div class="dropdown show">
                <a class="dropdown-button" href="#" data-toggle="dropdown" role="button" id="dropdownMenuLink-@form.Id" aria-haspopup="true" aria-expanded="false">
                    <img alt="" class="dots" src="/css/img/icons/3dots.png">
                </a>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink-@form.Id">
                    @if (hasEditPromptPerm)
                    {
                        <a class="dropdown-item" href="#" onclick="editPrompt(event, '@form.Id', '@ViewBag.ProjectId')"><img alt="" class="edit-svg-size" src="/css/img/icons/edit.svg">@sReportsV2.Cache.Resources.TextLanguage.Edit Prompt</a>
                    }
                    @if (hasViewPerm)
                    {
                        <a class="dropdown-item" href="#" onclick="@RenderOnclickCall(form, showUserProjects)"><img alt="" class="edit-svg-size" src="/css/img/icons/preview.svg">@sReportsV2.Cache.Resources.TextLanguage.View</a>
                    }
                    @if (hasDeletePerm)
                    {
                        <a class="dropdown-item" href="#" onclick="removeDocumentation(event, '@form.Id')"><img alt="" class="edit-svg-size" src="/css/img/icons/remove.svg">@sReportsV2.Cache.Resources.TextLanguage.Remove</a>
                    }
                </div>
            </div>
        }
    }

    private string RenderOnclickCall(FormDataOut form, bool showUserProjects)
    {
        return $"viewDocumentation(event, '{form.Id}', '{form.Version.Id}', '{form.ThesaurusId}', {showUserProjects.ToJsBoolean()})";   
    }
}